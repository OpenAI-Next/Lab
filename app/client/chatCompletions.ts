import { OpenaiPath, REQUEST_TIMEOUT_MS } from "@/constant";

import { getHeadersWithApiKey, getRequestOptions } from "./helper";
import { fetchEventSource } from "@fortaine/fetch-event-source";
import { api2ProviderBaseUrl } from "@/app/store";

export interface ChatCompletionRequest {
  /**
   * @description The model to use for generating completions.
   */
  model: string;

  /**
   * @description A list of messages comprising the conversation so far.
   */
  messages: (SystemMessage | UserMessage | AssistantMessage | ToolMessage)[];

  /**
   * @description The Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
   *
   * @default 0
   */
  frequency_penalty?: number | null;

  /**
   * @description Modify the likelihood of specified tokens appearing in the completion.
   * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100.
   * Mathematically, the bias is added to the logits generated by the model prior to sampling.
   * The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection;
   * values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
   *
   * @default null
   */
  logit_bias?: Record<number, number> | null;

  /**
   * @description Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
   *
   * @default false
   */
  logprobs?: boolean | null;

  /**
   * @description An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability.
   * `logprobs` must be set to true if this parameter is used.
   *
   * @default null
   *
   */
  top_logprobs?: number | null;

  /**
   * @description The maximum number of tokens that can be generated in the chat completion. The total length of input tokens and generated tokens is limited by the model's context length.
   */
  max_tokens?: number | null;

  /**
   * @description How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs.
   * @default 1
   */
  n?: number | null;

  /**
   * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
   * @default 0
   */
  presence_penalty?: number | null;

  /**
   * @description An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106.
   * Setting to { "type": "json_object" } enables JSON mode, which guarantees the message the model generates is valid JSON.
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   *
   * @default { type: "text" }
   */
  response_format?: {
    type: "text" | "json_object";
  };

  /**
   * @description This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.
   */
  seed?: number | null;

  /**
   * @description Up to 4 sequences where the API will stop generating further tokens.
   * @default null
   */
  stop?: string | string[] | null;

  /**
   * @description If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
   * @default false
   */
  stream?: boolean | null;

  /**
   * @description Options for streaming response. Only set this when you set stream: true.
   * @default null
   */
  stream_options?: {
    /**
     * @description If set, an additional chunk will be streamed before the data: [DONE] message. The usage field on this chunk shows the token usage statistics for the entire request, and the choices field will always be an empty array. All other chunks will also include a usage field, but with a null value.
     */
    include_usage?: boolean;
  };

  /**
   * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.
   * @default 1
   */
  temperature?: number | null;

  /**
   * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.
   * @default 1
   */
  top_p?: number | null;

  /**
   * @description A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
   */
  tools?: Array<{
    type: "function";
    function: {
      name: string;
      description?: string;

      /**
       * @description The parameters the functions accepts, described as a JSON Schema object. See the guide for examples, and the JSON Schema reference for documentation about the format.
       * @description Omitting parameters defines a function with an empty parameter list.
       */
      parameters?: object;
    };
  }>;

  /**
   * @description Controls which (if any) tool is called by the model. none means the model will not call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool. none is the default when no tools are present. auto is the default if tools are present.
   */
  tool_choice?:
    | string
    | {
        type: "function";
        function: {
          name: string;
        };
      };
  /**
   * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
   */
  user?: string;
}

export interface ChatCompletionDefaultResponse {
  id: string;
  object: "chat.completion";
  created: number;
  model: string;
  system_fingerprint: string;
  choices: {
    index: number;
    message: {
      role: "assistant" | string;
      content: string;
    };
    logprobs: null | LogprobsResponse;
    finish_reason: "stop" | string;
  }[];
  usage: UsageResponse;
}

export interface ChatCompletionStreamingChunkResponse {
  id: string;
  object: "chat.completion.chunk";
  created: number;
  model: string;
  system_fingerprint: string;
  choices: {
    index: number;
    delta: {
      role: "assistant" | string;
      content: string;
    };
    logprobs: null | LogprobsResponse;
    finish_reason: "stop" | string;
  }[];
}

interface LogprobsResponse {
  content: Array<{
    token: string;
    logprob: number;
    bytes: number[];
    top_logprobs: Array<{
      token: string;
      logprob: number;
      bytes: number[] | null;
    }>;
  }>;
}

interface UsageResponse {
  prompt_tokens: number;
  completion_tokens: number;
  total_tokens: number;
}

interface SystemMessage {
  role: "system";
  content: string;
  name?: string;
}

interface UserMessage {
  role: "user";
  content:
    | (UserMessageContentTextContent | UserMessageContentImageUrlContent)[]
    | string;
  name?: string;
}

interface UserMessageContentTextContent {
  type: "text";
  text: string; // The text content.
}

interface UserMessageContentImageUrlContent {
  type: "image_url";
  image_url: {
    url: string; // Either a URL of the image or the base64 encoded image data.
    detail?: string; // Specifies the detail level of the image. Learn more in the Vision guide.Defaults to auto
  };
}

interface AssistantMessage {
  role: "assistant";
  content?: string; // The contents of the assistant message. Required unless tool_calls or function_call is specified.
  name?: string; // An optional name for the participant. Provides the model information to differentiate between participants of the same role.
  tool_calls?: Array<{
    id: string; // The ID of the tool call.
    type: "function"; // The type of the tool. Currently, only function is supported.
    function: {
      // The function that the model called.
      name: string; // The name of the function to call.
      arguments: string; // The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    };
  }>;
}

interface ToolMessage {
  role: "tool";
  content: string; // The contents of the tool message.
  tool_call_id: string; // Tool call that this message is responding to.
}

export class ChatCompletionAPI {
  private readonly apiKey: string;

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  path(): string {
    return [[api2ProviderBaseUrl.Chat], OpenaiPath.ChatCompletionsPath].join(
      "/",
    );
  }

  async request(
    options: ChatCompletionRequest,
    signal?: AbortSignal,
    timeoutMs: number = REQUEST_TIMEOUT_MS,
    getText = false,
    onNewText?: (text: string) => void,
  ) {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
      const abortSignal = signal || controller.signal;

      if (getText && options.stream && onNewText) {
        //  FIXME：如果 n > 1，流式响应会返回多个结果，这里暂时只取第一个结果（索引为0）
        let isBatch = options.n && options.n > 1;
        await fetchEventSource(this.path(), {
          method: "POST",
          headers: getHeadersWithApiKey(this.apiKey) as any,
          body: JSON.stringify(options),
          signal: abortSignal,
          onmessage: (msg) => {
            if (msg.data === "[DONE]") return;

            const text = msg.data;
            try {
              // const json = JSON.parse(text) as { choices: { delta: { content: string } }[] };
              const json = JSON.parse(
                text,
              ) as ChatCompletionStreamingChunkResponse;
              const delta = isBatch
                ? json.choices[0].index === 0
                  ? json.choices[0]?.delta?.content
                  : null
                : json.choices[0]?.delta?.content;
              if (delta) {
                onNewText(delta);
              }
            } catch (e) {
              console.error("[Request] parse error", text);
            }
          },
        });
        clearTimeout(timeoutId);
      } else {
        const res = await fetch(this.path(), {
          ...getRequestOptions(this.apiKey, options),
          signal: abortSignal,
        });
        clearTimeout(timeoutId);
        return res;
      }
    } catch (e) {
      if (e instanceof Error && e.name === "AbortError") {
        console.warn("[Request] ChatCompletion request aborted");
      } else {
        console.error("[Request] Failed to make a ChatCompletion request", e);
      }
      throw e;
    }
  }
}
